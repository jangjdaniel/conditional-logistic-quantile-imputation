# and here is a way to easily extract regression coefficients
# example of intercept estimate!
reg_coeff |> filter(term == "(Intercept)") |> pull(estimate) #we only care about the estimate
as.numeric(reg_coeff$coefficients["(Intercept)"])
reg_coeff <- quantreg::rq(biomarker_MCAR_transformed ~ outcome + confounder + predictor,
data = generated_data_for_testing,
tau = 0.50) #50th quantile
as.numeric(reg_coeff$coefficients["(Intercept)"])
# or with broom:
# or with broom:
reg_coeff <- reg_coeff |> broom::tidy()
# and here is a way to easily extract regression coefficients
# example of intercept estimate!
reg_coeff |> filter(term == "(Intercept)") |> pull(estimate) #we only care about the estimate
set.seed(625)
my_sample <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7), log(0.85))
strong_effects <- c(logit(0.1), log(1.5), log(0.7), log(0.85))
num_imp <- 10 #number of imputations
generated_data_for_testing <- data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects,
prop_missing_MCAR = 0.3,
min_val = 0,
max_val = q_999999)
PMM <- function(my_data_filtered, correct_formula, num_imp) {
# Generate imputed datasets
capture.output({ #the mice package has weird output that isn't relevant for us. This is largely ignored
PMM_df <- mice::mice(my_data_filtered,
method = "pmm",
m = num_imp)
})
# Run regression!
PMM_regression_results <- purrr::map(1:num_imp, ~ { #we repeat this num_imp times
#extract the ith dataset (.x refers to the 1:num_imp)
data_iteration <- complete(PMM_df, action = .x)
#perform logistic regression
log_reg_df <- glm(as.formula(correct_formula),
data = data_iteration,
family = "binomial") |>
broom::tidy()
#this is not necessary, but for organization
log_reg_df
}
)
#make sure to return it!
return(PMM_regression_results)
}
# quantile regression!
reg_coeff <- quantreg::rq(biomarker_MCAR_transformed ~ outcome + confounder + predictor,
data = generated_data_for_testing,
tau = 0.50) #50th quantile
as.numeric(reg_coeff$coefficients["(Intercept)"])
# or with broom:
reg_coeff <- reg_coeff |> broom::tidy()
# and here is a way to easily extract regression coefficients
# example of intercept estimate!
reg_coeff |> filter(term == "(Intercept)") |> pull(estimate) #we only care about the estimate
logistic_quantile_imputation <- function(my_data, transformed_imputation_relationship, row_index) {
# Step 1) generate a random uniform value
u <- runif(1, min = 0, max = 0.99)
# Step 2) perform quantile regression with the uth quantile
reg_coeff <- quantreg::rq(as.formula(transformed_imputation_relationship),
data = my_data,
tau = u) |> #the uth quantile for regression
broom::tidy() #turn this into a dataframe
# save all regression coefficients
b_intercept <-  as.numeric(reg_coeff$coefficients["(Intercept)"])
b_outcome <-    as.numeric(reg_coeff$coefficients["outcome"])
b_confounder <- as.numeric(reg_coeff$coefficients["confounder"])
b_predictor <-  as.numeric(reg_coeff$coefficients["predictor"])
#predicted imputed value (which is in its transformed state)
imputation_value_transformed <- b_intercept + (b_outcome * my_data[row_index,]$outcome) + (b_confounder * my_data[row_index,]$confounder) + (b_predictor * my_data[row_index,]$predictor)
#return imputed value in its transformed state
return(imputation_value_transformed)
}
implement_logistic_quantile_imputation <- function(my_data, transformed_imputation_relationship, var_for_imp,
min_val = 0, max_val) {
# Convert var_for_imp to a symbol for tidy evaluation
var_sym <- sym(var_for_imp)
imputed_var_name <- paste0(var_for_imp, "_CLQI")
# next, create that variable name to perform our operation
my_data <- my_data |>
mutate(!!sym(imputed_var_name) := NA_real_)
# Perform the algorithm
for(row_index in 1:nrow(my_data)) { #for all indicies
if(is.na(my_data[[var_for_imp]][row_index])) { #if the cell in the vector for the variable for imputation is empty
imputed_value <- logistic_quantile_imputation( #implement algorithm
my_data = my_data,
transformed_imputation_relationship = transformed_imputation_relationship,
row_index = row_index)
# then impute it!
my_data[[imputed_var_name]][row_index] <- imputed_value
}
else { # or just assign the regular value
my_data[[imputed_var_name]][row_index] <- my_data[[var_for_imp]][row_index]
}
}
# Don't forget to UNTRANSFORM this new variable
my_data <- my_data |>
mutate(!!sym(imputed_var_name) := sapply(!!sym(imputed_var_name), #same name
inv_log_quant_transform, #perform the inverse log transform
min = min_val, max = max_val))
return(my_data)
}
CLQI <- function(my_data, var_for_imp, correct_formula, transformed_imputation_relationship,
num_imp, min_val = 0, max_val) {
CLQI_regression_results <- purrr::map(1:num_imp, ~ { #we repeat this num_imp times
# copy same missing data for each iteration
copy_my_data <- my_data
# implement algorithm
data_iteration <- implement_logistic_quantile_imputation(
my_data = copy_my_data,
transformed_imputation_relationship = transformed_imputation_relationship,
var_for_imp = var_for_imp,
min_val = min_val,
max_val = max_val
)
# perform logistic regression
log_reg_df <- glm(as.formula(correct_formula),
data = data_iteration,
family = "binomial") |>
broom::tidy()
#this is not necessary, but for organization
log_reg_df
}
)
return(CLQI_regression_results)
}
estimation_formula <- "outcome ~ biomarker_MCAR_transformed_CLQI + confounder + predictor"
my_formula <- "biomarker_MCAR_transformed ~ outcome + confounder + predictor"
tictoc::tic()
CLQI_results <- CLQI(my_data = generated_data_for_testing,
var_for_imp = "biomarker_MCAR_transformed",
correct_formula = estimation_formula,
transformed_imputation_relationship = my_formula,
num_imp = 10,
min_val = 0,
max_val = q_999999)
CLQI_results <- CLQI(my_data = generated_data_for_testing,
var_for_imp = "biomarker_MCAR_transformed",
correct_formula = estimation_formula,
transformed_imputation_relationship = my_formula,
num_imp = 10,
min_val = 0,
max_val = q_999999)
set.seed(625)
my_sample <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7), log(0.85))
strong_effects <- c(logit(0.1), log(1.5), log(0.7), log(0.85))
num_imp <- 10 #number of imputations
generated_data_for_testing <- data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects,
prop_missing_MCAR = 0.3,
min_val = 0,
max_val = q_999999)
PMM <- function(my_data_filtered, correct_formula, num_imp) {
# Generate imputed datasets
capture.output({ #the mice package has weird output that isn't relevant for us. This is largely ignored
PMM_df <- mice::mice(my_data_filtered,
method = "pmm",
m = num_imp)
})
# Run regression!
PMM_regression_results <- purrr::map(1:num_imp, ~ { #we repeat this num_imp times
#extract the ith dataset (.x refers to the 1:num_imp)
data_iteration <- complete(PMM_df, action = .x)
#perform logistic regression
log_reg_df <- glm(as.formula(correct_formula),
data = data_iteration,
family = "binomial") |>
broom::tidy()
#this is not necessary, but for organization
log_reg_df
}
)
#make sure to return it!
return(PMM_regression_results)
}
# quantile regression!
reg_coeff <- quantreg::rq(biomarker_MCAR_transformed ~ outcome + confounder + predictor,
data = generated_data_for_testing,
tau = 0.50) #50th quantile
as.numeric(reg_coeff$coefficients["(Intercept)"])
# or with broom:
reg_coeff <- reg_coeff |> broom::tidy()
# and here is a way to easily extract regression coefficients
# example of intercept estimate!
reg_coeff |> filter(term == "(Intercept)") |> pull(estimate) #we only care about the estimate
logistic_quantile_imputation <- function(my_data, transformed_imputation_relationship, row_index) {
# Step 1) generate a random uniform value
u <- runif(1, min = 0, max = 0.99)
# Step 2) perform quantile regression with the uth quantile
reg_coeff <- quantreg::rq(as.formula(transformed_imputation_relationship),
data = my_data,
tau = u) #the uth quantile for regression
# save all regression coefficients
b_intercept <-  as.numeric(reg_coeff$coefficients["(Intercept)"])
b_outcome <-    as.numeric(reg_coeff$coefficients["outcome"])
b_confounder <- as.numeric(reg_coeff$coefficients["confounder"])
b_predictor <-  as.numeric(reg_coeff$coefficients["predictor"])
#predicted imputed value (which is in its transformed state)
imputation_value_transformed <- b_intercept + (b_outcome * my_data[row_index,]$outcome) + (b_confounder * my_data[row_index,]$confounder) + (b_predictor * my_data[row_index,]$predictor)
#return imputed value in its transformed state
return(imputation_value_transformed)
}
implement_logistic_quantile_imputation <- function(my_data, transformed_imputation_relationship, var_for_imp,
min_val = 0, max_val) {
# Convert var_for_imp to a symbol for tidy evaluation
var_sym <- sym(var_for_imp)
imputed_var_name <- paste0(var_for_imp, "_CLQI")
# next, create that variable name to perform our operation
my_data <- my_data |>
mutate(!!sym(imputed_var_name) := NA_real_)
# Perform the algorithm
for(row_index in 1:nrow(my_data)) { #for all indicies
if(is.na(my_data[[var_for_imp]][row_index])) { #if the cell in the vector for the variable for imputation is empty
imputed_value <- logistic_quantile_imputation( #implement algorithm
my_data = my_data,
transformed_imputation_relationship = transformed_imputation_relationship,
row_index = row_index)
# then impute it!
my_data[[imputed_var_name]][row_index] <- imputed_value
}
else { # or just assign the regular value
my_data[[imputed_var_name]][row_index] <- my_data[[var_for_imp]][row_index]
}
}
# Don't forget to UNTRANSFORM this new variable
my_data <- my_data |>
mutate(!!sym(imputed_var_name) := sapply(!!sym(imputed_var_name), #same name
inv_log_quant_transform, #perform the inverse log transform
min = min_val, max = max_val))
return(my_data)
}
CLQI <- function(my_data, var_for_imp, correct_formula, transformed_imputation_relationship,
num_imp, min_val = 0, max_val) {
CLQI_regression_results <- purrr::map(1:num_imp, ~ { #we repeat this num_imp times
# copy same missing data for each iteration
copy_my_data <- my_data
# implement algorithm
data_iteration <- implement_logistic_quantile_imputation(
my_data = copy_my_data,
transformed_imputation_relationship = transformed_imputation_relationship,
var_for_imp = var_for_imp,
min_val = min_val,
max_val = max_val
)
# perform logistic regression
log_reg_df <- glm(as.formula(correct_formula),
data = data_iteration,
family = "binomial") |>
broom::tidy()
#this is not necessary, but for organization
log_reg_df
}
)
return(CLQI_regression_results)
}
estimation_formula <- "outcome ~ biomarker_MCAR_transformed_CLQI + confounder + predictor"
my_formula <- "biomarker_MCAR_transformed ~ outcome + confounder + predictor"
tictoc::tic()
CLQI_results <- CLQI(my_data = generated_data_for_testing,
var_for_imp = "biomarker_MCAR_transformed",
correct_formula = estimation_formula,
transformed_imputation_relationship = my_formula,
num_imp = 10,
min_val = 0,
max_val = q_999999)
tictoc::toc()
CLQI_results
CLQI_results[[1]]
my_vector <- c()
for(i in 1:length(thing)) {
my_vector[i] <- CLQI_results[[i]] |> filter(term == "biomarker_MCAR_transformed_CLQI") |> pull(estimate)
}
mean(my_vector) - weak_effects[2]
estimation_formula <- "outcome ~ biomarker_MCAR_transformed_CLQI + confounder + predictor"
my_formula <- "biomarker_MCAR_transformed ~ outcome + confounder + predictor"
tictoc::tic()
CLQI_results <- CLQI(my_data = generated_data_for_testing,
var_for_imp = "biomarker_MCAR_transformed",
correct_formula = estimation_formula,
transformed_imputation_relationship = my_formula,
num_imp = 10,
min_val = 0,
max_val = q_999999)
tictoc::toc()
CLQI_results
CLQI_results[[1]]
my_vector <- c()
for(i in 1:length(thing)) {
my_vector[i] <- CLQI_results[[i]] |> filter(term == "biomarker_MCAR_transformed_CLQI") |> pull(estimate)
}
mean(my_vector) - weak_effects[2]
estimation_formula <- "outcome ~ biomarker_MAR_transformed_CLQI + confounder + predictor"
my_formula <- "biomarker_MAR_transformed ~ outcome + confounder + predictor"
tictoc::tic()
CLQI_results <- CLQI(my_data = generated_data_for_testing,
var_for_imp = "biomarker_MAR_transformed",
correct_formula = estimation_formula,
transformed_imputation_relationship = my_formula,
num_imp = 20,
min_val = 0,
max_val = q_999999)
tictoc::toc()
CLQI_results
set.seed(625)
my_sample <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7), log(0.85))
generated_data_for_testing <- data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects,
prop_missing_MCAR = 0.3,
min_val = 0,
max_val = q_999999)
estimation_formula <- "outcome ~ biomarker_MCAR_transformed_CLQI + confounder + predictor"
my_formula <- "biomarker_MCAR_transformed ~ outcome + confounder + predictor"
q_999999 <- get_mixture_quantile(0.999999)
tictoc::tic()
CLQI_results <- CLQI(my_data = generated_data_for_testing,
var_for_imp = "biomarker_MCAR_transformed",
correct_formula = estimation_formula,
transformed_imputation_relationship = my_formula,
num_imp = 10,
min_val = 0,
max_val = q_999999)
tictoc::toc()
CLQI_results
rubin_rule_estimate <- function(my_list_of_reg, var_of_interest) {
#initialize vector
my_vector <- c()
#for loop to
for(i in 1:seq_along(my_list_of_reg)) {
my_vector[i] <- CLQI_results[[i]] |> filter(term == var_of_interest) |> pull(estimate)
}
}
rubin_rule_estimate(my_list_of_reg = CLQI_results,
var_of_interest = "biomarker_MCAR_transformed_CLQI")
rubin_rule_estimate <- function(my_list_of_reg, var_of_interest) {
#initialize vector
my_vector <- c()
#for loop to
for(i in 1:seq_along(my_list_of_reg)) {
my_vector[i] <- CLQI_results[[i]] |> filter(term == var_of_interest) |> pull(estimate)
}
return(mean(my_vector))
}
rubin_rule_estimate(my_list_of_reg = CLQI_results,
var_of_interest = "biomarker_MCAR_transformed_CLQI")
rubin_rule_estimate(my_list_of_reg = CLQI_results,
var_of_interest = "biomarker_MCAR_transformed_CLQI") - log(1.1)
seq_along(CLQI_results)
rubin_rule_estimate <- function(my_list_of_reg, var_of_interest) {
#purrr it
my_vector <- map_dbl(1:length(my_list_of_reg) ~ {
CLQI_results[[.x]] |> filter(term == var_of_interest) |> pull(estimate)
})
return(mean(my_vector))
}
rubin_rule_estimate(my_list_of_reg = CLQI_results, var_of_interest = "biomarker_MCAR_transformed_CLQI")
rubin_rule_estimate <- function(my_list_of_reg, var_of_interest) {
#purrr it
my_vector <- map_dbl(1:length(my_list_of_reg), ~ {
CLQI_results[[.x]] |> filter(term == var_of_interest) |> pull(estimate)
})
return(mean(my_vector))
}
rubin_rule_estimate(my_list_of_reg = CLQI_results, var_of_interest = "biomarker_MCAR_transformed_CLQI")
seq_along(CLQI_results)
rubin_rule_estimate(my_list_of_reg = CLQI_results, var_of_interest = "biomarker_MCAR_transformed_CLQI") - log(1.1)
rubin_rule_estimate <- function(my_list_of_reg, var_of_interest) {
#purrr it
my_vector <- map_dbl(1:length(my_list_of_reg), ~ {
CLQI_results[[.x]] |> filter(term == var_of_interest) |> pull(estimate)
})
return(mean(my_vector))
}
rubin_rule_estimate(my_list_of_reg = CLQI_results, var_of_interest = "biomarker_MCAR_transformed_CLQI")
rubin_rule_estimate <- function(my_list_of_reg, var_of_interest) {
#purrr it
my_vector <- map_dbl(1:length(my_list_of_reg), ~ {
my_list_of_reg[[.x]] |>
filter(term == var_of_interest) |>
pull(estimate)
})
return(mean(my_vector))
}
rubin_rule_estimate(my_list_of_reg = CLQI_results, var_of_interest = "biomarker_MCAR_transformed_CLQI")
rubin_rule_estimate <- function(my_list_of_reg, var_of_interest) {
#purrr it
my_vector <- map_dbl(1:length(my_list_of_reg), ~ {
my_list_of_reg[[.x]] |>
filter(term == var_of_interest) |>
pull(estimate)
})
return(my_vector)
}
rubin_rule_estimate(my_list_of_reg = CLQI_results, var_of_interest = "biomarker_MCAR_transformed_CLQI")
CLQI_results
CLQI_results
rubin_rule_estimate(my_list_of_reg = CLQI_results, var_of_interest = "biomarker_MCAR_transformed_CLQI")
rubin_rule_estimate <- function(my_list_of_reg, var_of_interest) {
#purrr it
my_vector <- map_dbl(1:length(my_list_of_reg), ~ { #for the given length
my_list_of_reg[[.x]] |>  #extract the mth imputation
filter(term == var_of_interest) |> #only take the variable of interest
pull(estimate)
})
return(mean(my_vector)) #RR for the estimate is equivalent to the mean
}
rubin_rule_estimate(my_list_of_reg = CLQI_results, var_of_interest = "biomarker_MCAR_transformed_CLQI")
CLQI_results
extract_statistics <- function(my_list_of_reg, var_of_interest) {
estimates <-
map_dbl(1:length(my_list_of_reg), ~ { #for the given length
my_list_of_reg[[.x]] |>  #extract the mth imputation
filter(term == var_of_interest) |> #only take the variable of interest
pull(estimate)
})
standard_error <-
map_dbl(1:length(my_list_of_reg), ~ { #for the given length
my_list_of_reg[[.x]] |>  #extract the mth imputation
filter(term == var_of_interest) |> #only take the variable of interest
pull(std.error)
})
p_values <-
map_dbl(1:length(my_list_of_reg), ~ { #for the given length
my_list_of_reg[[.x]] |>  #extract the mth imputation
filter(term == var_of_interest) |> #only take the variable of interest
pull(p.value)
})
my_list <- return(estimates, standard_error, p_values)
return(my_list)
}
extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")
extract_statistics <- function(my_list_of_reg, var_of_interest) {
estimates <-
map_dbl(1:length(my_list_of_reg), ~ { #for the given length
my_list_of_reg[[.x]] |>  #extract the mth imputation
filter(term == var_of_interest) |> #only take the variable of interest
pull(estimate)
})
standard_error <-
map_dbl(1:length(my_list_of_reg), ~ { #for the given length
my_list_of_reg[[.x]] |>  #extract the mth imputation
filter(term == var_of_interest) |> #only take the variable of interest
pull(std.error)
})
p_values <-
map_dbl(1:length(my_list_of_reg), ~ { #for the given length
my_list_of_reg[[.x]] |>  #extract the mth imputation
filter(term == var_of_interest) |> #only take the variable of interest
pull(p.value)
})
my_list <- list(estimates, standard_error, p_values)
return(my_list)
}
extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")
a
a <- extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")
a
extract_statistics <- function(my_list_of_reg, var_of_interest) {
#helper function to extract columns
extract_col <- function(col_name) {
purrr::map_dbl(my_list_of_reg, ~ {
.x |>
filter(term == var_of_interest) |>
pull(.data[[col_name]])
})
}
estimates <- extract_col("estimate")
standard_error <- extract_col("std.error")
p_values <- extract_col("p.value")
return(list(estimates, standard_error, p_values))
}
a <- extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")
a
# Compare
CLQI_results
extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")
rubin_rule_estimate(extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI"))
extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")
extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")[[1]]
rubin_rule_estimate(extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")[[1]])
as.vector(extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")[[1]])
estimate_test <- as.vector(extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")[[1]])
rubin_rule_estimate(estimate_test)
rubin_rule_estimate <- function(extracted_statistics) {
return(mean(as.vector(extracted_statistics[[1]])))
}
rubin_rule_estimate <- function(extracted_statistics) {
estimate_vector <- as.vector(extracted_statistics[[1]])
return(mean(estimate_vector))
}
estimate_test <- as.vector(extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")[[1]])
rubin_rule_estimate(estimate_test)
extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI")
rubin_rule_estimate(extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI"))
rubin_rule_estimate(extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI"))
rubin_rule_SE(extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI"))
rubin_rule_SE <- function(extracted_statistics) {
#extract necessary vectors
estimate_vector <- as.vector(extracted_statistics[[1]])
SE_vector <- as.vector(extracted_statistics[[2]])
m <- length(estimate_vector) #number of imputations
#necessary calculations
variance_within_MI <- mean((SE_vector)^2)
variance_between_MI <- sum((estimate_vector - mean(estimate_vector))^2) / (m - 1)
#actual value
total_variance <- variance_within_MI + variance_between_MI + (variance_between_MI / m)
return(sqrt(total_variance))
}
rubin_rule_SE(extract_statistics(CLQI_results, "biomarker_MCAR_transformed_CLQI"))
