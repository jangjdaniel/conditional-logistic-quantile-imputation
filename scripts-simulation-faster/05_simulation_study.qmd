
This qmd is a culmination from `00-04`. I hope that I was able to tell a story on how we're approaching this problem.

We will first define a function that encompasses all the important parts needed to do one simulation run, and then we will run our simulations *(potentially in different documents to avoid confusion, but we're not sure at the moment)*.

```{r}
set.seed(695)
```

Load in `04`, which loads in `03, 02, 01, 00`

```{r}
knitr::purl("04_simulation_study_functions.qmd", output = "temp_scripts/04_temp_script.R")
source("temp_scripts/04_temp_script.R")
```

# Coefficient Effects

```{r}
weak_effects <- c(logit(0.1), log(1.1), log(0.7), log(0.85))
strong_effects <- c(logit(0.1), log(1.5), log(0.7), log(0.85))
```

`repeat_full_simulation_MCAR` is a function that calculates the performance of all four methods of interest for the *MCAR* case. This is a very extensive function and is what everything has built up to.

```{r}
repeat_full_simulation_MCAR <- function(num_simulations = 1000, my_sample_size, num_imp,
                                        coefficient_effects, true_effect, prop_missing_MCAR) {
  
  # STEP 0) Define datasets for all four methods
  CC_total_result <- data.frame()
  CD_total_result <- data.frame()
  PMM_total_result <- data.frame()
  CLQI_total_result <- data.frame()
  
  #have an iteration indicator to see if function is still running
  iteration_indicator <- 0
  
  #now the loop
  for(i in 1:num_simulations) {
  
    # STEP 1) Generate data
    new_data <- data_generating_mechanism(
      my_sample = my_sample_size,
      beta_coefficients = coefficient_effects,
      prop_missing_MCAR = prop_missing_MCAR,
      min_val = 0,
      max_val = 20)
    
    # STEP 2) Do CC
    CC <- "outcome ~ biomarker_MCAR + confounder + predictor"
    CC_sim_result <- complete_case_or_data(new_data, CC)
    CC_sim_result <- complete_performance_one_iter(CC_sim_result, orig_sample_size = my_sample_size, 
                                true_effect = true_effect, biomarker_name = "biomarker_MCAR")
    
    CC_total_result <- dplyr::bind_rows(CC_total_result, CC_sim_result)
    
    # STEP 2.1) Do CD
    CD <- "outcome ~ biomarker + confounder + predictor"
    CD_sim_result <- complete_case_or_data(new_data, CD)
    CD_sim_result <- complete_performance_one_iter(CD_sim_result, orig_sample_size = my_sample_size, 
                                true_effect = true_effect, biomarker_name = "biomarker")
    
    CD_total_result <- dplyr::bind_rows(CD_total_result, CD_sim_result)
    
    # STEP 3) Do PMM
    PMM_formula <- "outcome ~ biomarker_MCAR + confounder + predictor"
    new_data_PMM <- new_data |>
      dplyr::select(outcome, biomarker_MCAR, confounder, predictor)
    
    PMM_sim_result <- PMM(new_data_PMM, PMM_formula, num_imp)
    PMM_sim_result <- MI_performance_one_iter(PMM_sim_result,
                                                    "biomarker_MCAR",
                                                    true_value = true_effect)
    
      # Append to PMM
      PMM_total_result <- dplyr::bind_rows(PMM_total_result, PMM_sim_result)
    
    # STEP 4) Do CLQI
    quant_reg_formula <- "biomarker_MCAR_transformed ~ outcome + confounder + predictor"
    estimation_formula <- "outcome ~ biomarker_MCAR_CLQI_untransformed + confounder + predictor"
    
    CLQI_sim_result <- CLQI(my_data = new_data, 
                            var_for_imp = "biomarker_MCAR_transformed",
                            transformed_imputation_relationship = quant_reg_formula, 
                            correct_formula = estimation_formula, 
                            num_imp = num_imp,
                            min_val = 0,
                            max_val = 20)
    CLQI_sim_result <- MI_performance_one_iter(CLQI_sim_result,
                                                     "biomarker_MCAR_CLQI_untransformed",
                                                     true_value = true_effect)
    
      # Append to CLQI
      CLQI_total_result <- dplyr::bind_rows(CLQI_total_result, CLQI_sim_result)
      
    #end this by showing imputation
      iteration_indicator <- iteration_indicator + 1
      print(iteration_indicator)
  }
  
  #gather all into a list
  sim_list <- list(CC_total_result, CD_total_result, PMM_total_result, CLQI_total_result)
  
  
  #obtain full performance measure calculations
  a <- full_performance(CC_total_result, 
                        rel_eff_comparison = CD_total_result)

  b <- full_performance(CD_total_result, 
                        rel_eff_comparison = CD_total_result)

  c <- full_performance(PMM_total_result, 
                        rel_eff_comparison = CD_total_result)

  d <- full_performance(CLQI_total_result, 
                        rel_eff_comparison = CD_total_result)
  
  #return the list
  return(list(CC_total_result, a, 
              CD_total_result, b,
              PMM_total_result, c,
              CLQI_total_result, d))
}
```

> "Test case": See that everything generates for all four methods

```{r, eval=FALSE}
tictoc::tic()
tester <- repeat_full_simulation_MCAR(num_simulations = 10, my_sample_size = 1000, num_imp = 30,
                            coefficient_effects = weak_effects, true_effect = weak_effects[2],
                            prop_missing_MCAR = 0.3)
tictoc::toc()
tester
```

# SIMULATION SETTING 1: Example of setup
> Sample size of 1000, MCAR 30%, true effects are weak

```{r, eval=FALSE}
sample_1000_weak_coefficients_MCAR_30 <-
  repeat_full_simulation_MCAR(num_simulations = 1000, 
                              my_sample_size = 1000,
                              num_imp = 10,
                              coefficient_effects = weak_effects, 
                              true_effect = weak_effects[2],
                              prop_missing_MCAR = 0.3)

saveRDS(sample_1000_weak_coefficients_MCAR_30, 
        file = "sim_results/sample_1000_weak_coefficients_MCAR_30.rds")
```

```{r}
sample_1000_weak_coefficients_MCAR_30 <- readRDS(file = "sim_results/sample_1000_weak_coefficients_MCAR_30.rds")
```

# SIMULATION SETTING 2: When does this method break?

```{r, eval=FALSE}
sample_200_weak_coefficients_MCAR_30 <- 
  repeat_full_simulation_MCAR(num_simulations = 1000, 
                              my_sample_size = 200,
                              num_imp = 10,
                              coefficient_effects = weak_effects, 
                              true_effect = weak_effects[2],
                              prop_missing_MCAR = 0.6)

saveRDS(sample_200_weak_coefficients_MCAR_30, 
        file = "sim_results/sample_200_weak_coefficients_MCAR_30.rds")
```

```{r}
sample_200_weak_coefficients_MCAR_30 <- readRDS(file = "sim_results/sample_200_weak_coefficients_MCAR_30.rds")
```

Presentation ready figures (function)

```{r}
presentation_ready_results <- function(results, true_effect) {
  
  cleaned_results <- rbind(
    results[[2]] |> mutate(type = "CC"),
    results[[4]] |> mutate(type = "CD"),
    results[[6]] |> mutate(type = "PMM"),
    results[[8]] |> mutate(type = "CLQI")
    ) |>
    mutate(rel_bias = 100 * (estimate_a - true_effect) / true_effect) |>
    relocate(type, .before = 1) |>
    relocate(rel_bias, .before = 5) |>
    mutate(across(where(is.numeric), ~ round(.x, 3))) |>
    gt() |>
    cols_label(
      type = "Method",
      estimate_a = "Estimate",
      MCSE_estimate = "MCSE Estimate",
      bias_a = "Bias",
      rel_bias = "Relative Bias",
      empirical_SE = "Empirical SE",
      model_SE_a = "Model-Based SE",
      MCSE_model_SE = "MCSE MSE",
      coverage_a = "Coverage",
      MCSE_coverage = "MCSE Coverage",
      power_a = "Power",
      MCSE_power = "MCSE Power"
      ) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(everything())
  )
  
  return(cleaned_results)
}
```

Test case (I guess)

```{r}
presentation_ready_results(sample_1000_weak_coefficients_MCAR_30, log(1.1))
presentation_ready_results(sample_200_weak_coefficients_MCAR_30, log(1.1))
```

Let's extract some results for the presentation (ughers)

```{r}
#extract PMM and CLQI to put as a figure
PMM_example <- sample_1000_weak_coefficients_MCAR_30[[5]] |> mutate(type = "PMM")
CLQI_example <- sample_1000_weak_coefficients_MCAR_30[[7]] |> mutate(type = "CLQI")

vis_result <- rbind(PMM_example, CLQI_example)
```

```{r}
ggplot(data = vis_result, aes(x=estimate, fill=type)) +
  geom_density(alpha = 0.5) +
  theme_bw() +
  geom_vline(xintercept = log(1.1)) +
  labs(x = "Estimate",
       y = "Density",
       fill = "MI Method",
       title = "Empirical Distribution of Estimates from both MI methods")
```

```{r}
rbind(
  sample_1000_weak_coefficients_MCAR_30[[2]] |> mutate(type = "Complete Case"),
  sample_1000_weak_coefficients_MCAR_30[[4]] |> mutate(type = "Complete Data"),
  sample_1000_weak_coefficients_MCAR_30[[6]] |> mutate(type = "PMM"),
  sample_1000_weak_coefficients_MCAR_30[[8]] |> mutate(type = "CLQI")) |>
  mutate(rel_bias = 100 * (estimate - log(1.1)) / log(1.1)) |>
  relocate(type, .before = 1) |>
  relocate(rel_bias, .before = 5) |>
  mutate(across(where(is.numeric), ~ round(.x, 3))) |>
  dplyr::select(type, rel_bias, empirical_SE, model_SE, coverage, power) |>
  gt() |>
    cols_label(
      type = "Method",
      rel_bias = "Relative Bias",
      empirical_SE = "Empirical SE",
      model_SE = "Model Based SE",
      coverage = "Coverage",
      power = "Power"
      ) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(everything())
  )
```