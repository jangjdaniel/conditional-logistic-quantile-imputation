
This qmd will describe how we will perform the full simulation study. Most functions have already been defined in `00`, `01`, `02`, and `03`, so make sure to read everything there.

*This qmd will likely be a demonstration of how one simulation setting will be tested. We'll see, however*

STEP 1) Define our simulation setting

```{r}
set.seed(525)
q_9999 <- get_mixture_quantile(0.9999)
q_999999 <- get_mixture_quantile(0.999999)

my_sample_size <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7), log(0.85))
num_imp <- 10 #number of imputations
prop_missing_MCAR <- 0.3
```

```{r}
true_effect <- weak_effects[2]
true_effect
```

STEP 2) Generate dataset with all missingness

```{r}
simulation_data <- data_generating_mechanism(
  my_sample = my_sample_size,
  beta_coefficients = weak_effects,
  prop_missing_MCAR = prop_missing_MCAR,
  min_val = 0,
  max_val = q_999999)
```

STEP 3) Perform `Complete-Case`, `Complete-Data`, `PMM`, and `CLQI` and get *raw logistic regression results*

`Complete-Case`: Recall that we need to specify the correct missing data: MCAR or MAR

```{r}
CC <- "outcome ~ biomarker_MCAR + confounder + predictor"
CC_sim_result <- complete_case_or_data(simulation_data, CC)
CC_sim_result
```

`Complete-Data`

```{r}
CD <- "outcome ~ biomarker + confounder + predictor"
CD_sim_result <- complete_case_or_data(simulation_data, CD)
CD_sim_result
```

`PMM`: Recall we need to select our data first

```{r, eval=FALSE}
PMM_formula <- "outcome ~ biomarker_MCAR + confounder + predictor"
simulation_data_PMM <- simulation_data |>
  dplyr::select(outcome, biomarker_MCAR, confounder, predictor)

PMM_sim_result <- PMM(simulation_data_PMM, PMM_formula, num_imp)
PMM_sim_result
```

`CLQI`: this one was not coded super well, so make sure you're specifying everything correctly
> Must feed the function the transformed variable, but the estimation formula will be untransformed.
> Sorry I coded this weirdly

```{r, eval=FALSE}
quant_reg_formula <- "biomarker_MCAR_transformed ~ outcome + confounder + predictor"
estimation_formula <- "outcome ~ biomarker_MCAR_CLQI_untransformed + confounder + predictor"

CLQI_sim_result <- CLQI(my_data = simulation_data, 
                        var_for_imp = "biomarker_MCAR_transformed",
                        transformed_imputation_relationship = quant_reg_formula, 
                        correct_formula = estimation_formula, 
                        num_imp = num_imp,
                        min_val = 0,
                        max_val = q_999999)

CLQI_sim_result
```


STEP 4) Calculate some of the performance measures 

``CC and CD` *NOT IMPLEMENTED YET*

```{r}

```

`PMM`

```{r, eval=FALSE}
extracted_PMM <- extract_statistics(PMM_sim_result, "biomarker_MCAR")
estimate_PMM <- rubin_rule_estimate(extracted_PMM)
model_SE_PMM <- rubin_rule_SE(extracted_PMM)

#now the dataframe
PMM_sim_run <- data.frame(
  estimate = estimate_PMM,
  bias = estimate_PMM - true_effect,
  rel_bias = ((estimate_PMM - true_effect) / true_effect) * 100,
  model_SE = model_SE_PMM,
  coverage = coverage(estimate_PMM, model_SE_PMM, 
                          orig_sample_size = 1000,
                          true_value = true_effect) ,
  power =  power(extracted_PMM)
) |>
  mutate(across(where(is.numeric), ~ round(.x, 3)))

PMM_sim_run
```

`CLQI`

```{r, eval=FALSE}
extracted_CLQI <- extract_statistics(CLQI_sim_result, "biomarker_MCAR_CLQI_untransformed")
estimate_CLQI <- rubin_rule_estimate(extracted_CLQI)
model_SE_CLQI <- rubin_rule_SE(extracted_CLQI)

#now the dataframe
CLQI_sim_run <- data.frame(
  estimate = estimate_CLQI,
  bias = estimate_CLQI - true_effect,
  rel_bias = ((estimate_CLQI - true_effect) / true_effect) * 100,
  model_SE = model_SE_CLQI,
  coverage = coverage(estimate_CLQI, model_SE_CLQI, 
                          orig_sample_size = 1000,
                          true_value = true_effect) ,
  power =  power(extracted_CLQI)
) |>
  mutate(across(where(is.numeric), ~ round(.x, 3)))

CLQI_sim_run
```

`calculate_one_sim_performance` is a function that calculates everything automatically
- Same arguments as `extract_statistics`

```{r}
calculate_one_sim_performance <- function(my_list_of_reg, var_of_interest, true_value) {
  extracted <- extract_statistics(my_list_of_reg, var_of_interest)
  
  estimate <- rubin_rule_estimate(extracted)
  model_SE <- rubin_rule_SE(extracted)
  
  #now the dataframe
  sim_run <- data.frame(
    estimate = estimate,
    bias = estimate - true_value,
    rel_bias = ((estimate - true_value) / true_value) * 100,
    model_SE = model_SE,
    coverage = coverage(estimate, model_SE,
                        orig_sample_size = 1000,
                        true_value = true_value) ,
    power =  power(extracted)
  ) 

  return(sim_run)
  
}
```

> Test case 1) Check that CLQI and PMM ones look the same

```{r, eval=FALSE}
calculate_one_sim_performance(CLQI_sim_result,
                              "biomarker_MCAR_CLQI_untransformed",
                              true_value = true_effect)
```

STEP 5) Repeat Steps 1-4 N times

*CC and CD NOT IMPLEMENTED YET*

```{r}
# STEP 0) Define datasets for all four methods
CC_total_result <- data.frame()
CD_total_result <- data.frame()
PMM_total_result <- data.frame()
CLQI_total_result <- data.frame()
iteration_indicator <- 0

tictoc::tic()
for(i in 1:20) {

  # STEP 1) Generate data
  new_data <- data_generating_mechanism(
    my_sample = my_sample_size,
    beta_coefficients = weak_effects,
    prop_missing_MCAR = prop_missing_MCAR,
    min_val = 0,
    max_val = q_999999)
  
  # Do PMM
  PMM_formula <- "outcome ~ biomarker_MCAR + confounder + predictor"
  new_data_PMM <- new_data |>
    dplyr::select(outcome, biomarker_MCAR, confounder, predictor)
  
  PMM_sim_result <- PMM(new_data_PMM, PMM_formula, num_imp)
  PMM_sim_result <- calculate_one_sim_performance(PMM_sim_result,
                                                  "biomarker_MCAR",
                                                  true_value = true_effect)
  
    # Append to PMM
    PMM_total_result <- dplyr::bind_rows(PMM_total_result, PMM_sim_result)
  
  # Do CLQI
  quant_reg_formula <- "biomarker_MCAR_transformed ~ outcome + confounder + predictor"
  estimation_formula <- "outcome ~ biomarker_MCAR_CLQI_untransformed + confounder + predictor"
  
  CLQI_sim_result <- CLQI(my_data = new_data, 
                          var_for_imp = "biomarker_MCAR_transformed",
                          transformed_imputation_relationship = quant_reg_formula, 
                          correct_formula = estimation_formula, 
                          num_imp = num_imp,
                          min_val = 0,
                          max_val = q_999999)
  CLQI_sim_result <- calculate_one_sim_performance(CLQI_sim_result,
                                                   "biomarker_MCAR_CLQI_untransformed",
                                                   true_value = true_effect)
  
    # Append to CLQI
    CLQI_total_result <- dplyr::bind_rows(CLQI_total_result, CLQI_sim_result)
    
  #end this by showing imputation
    iteration_indicator <- iteration_indicator + 1
    print(iteration_indicator)
}
tictoc::toc()
```

`repeat_full_simulation``

```{r}

```

VERY Initial checks

```{r}
PMM_total_result
CLQI_total_result

ggplot(data = PMM_total_result, aes(x = bias))+ 
  geom_density()

ggplot(data = CLQI_total_result, aes(x = bias))+ 
  geom_density()
```

STEP 6) After Step 5, calculate all the remaining performance measures
- Example with CLQI

```{r}
CLQI_total_result |>
  summarize(
    estimate = mean(estimate),
    MCSE_estimate = MCSE(CLQI_total_result$estimate, num_sim = 10),
    
    bias = mean(bias),
    MCSE_bias = MCSE(CLQI_total_result$bias, num_sim = 10),
    
    model_SE = mean(model_SE),
    MCSE_model_SE = MCSE(CLQI_total_result$model_SE, num_sim = 10),
    
    coverage = sum(coverage) / n(),
    power = sum(power) / n(),
    
    empirical_SE = empirical_SE(CLQI_total_result),
    RMSE = RMSE(CLQI_total_result, true_effect),
    relative_efficiency = rel_efficiency(CLQI_total_result, PMM_total_result)
  ) |>
  gt() |>
  fmt_number(
    columns = everything(),
    decimals = 4
  )
```

`summarize_full_simulation`

```{r}

```

